// Generated by gencpp from file can_to_eth/vel_cmd.msg
// DO NOT EDIT!


#ifndef CAN_TO_ETH_MESSAGE_VEL_CMD_H
#define CAN_TO_ETH_MESSAGE_VEL_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_to_eth
{
template <class ContainerAllocator>
struct vel_cmd_
{
  typedef vel_cmd_<ContainerAllocator> Type;

  vel_cmd_()
    : vel_speed(0.0)
    , vel_heading(0.0)
    , heading_speed(0.0)  {
    }
  vel_cmd_(const ContainerAllocator& _alloc)
    : vel_speed(0.0)
    , vel_heading(0.0)
    , heading_speed(0.0)  {
  (void)_alloc;
    }

   typedef double _vel_speed_type;
  _vel_speed_type vel_speed;

   typedef double _vel_heading_type;
  _vel_heading_type vel_heading;

   typedef double _heading_speed_type;
  _heading_speed_type heading_speed;

  typedef boost::shared_ptr< ::can_to_eth::vel_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_to_eth::vel_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct vel_cmd_

typedef ::can_to_eth::vel_cmd_<std::allocator<void> > vel_cmd;

typedef boost::shared_ptr< ::can_to_eth::vel_cmd > vel_cmdPtr;
typedef boost::shared_ptr< ::can_to_eth::vel_cmd const> vel_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_to_eth::vel_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_to_eth::vel_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace can_to_eth

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'can_to_eth': ['/home/boole/new_world/catkin_ws/src/can_to_eth/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::can_to_eth::vel_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_to_eth::vel_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_to_eth::vel_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_to_eth::vel_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_to_eth::vel_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_to_eth::vel_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_to_eth::vel_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00ad716d1bc95eb35e788fc701352ceb";
  }

  static const char* value(const ::can_to_eth::vel_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00ad716d1bc95eb3ULL;
  static const uint64_t static_value2 = 0x5e788fc701352cebULL;
};

template<class ContainerAllocator>
struct DataType< ::can_to_eth::vel_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_to_eth/vel_cmd";
  }

  static const char* value(const ::can_to_eth::vel_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_to_eth::vel_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float64 vel_speed\n\
float64 vel_heading\n\
float64 heading_speed\n\
";
  }

  static const char* value(const ::can_to_eth::vel_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_to_eth::vel_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_speed);
      stream.next(m.vel_heading);
      stream.next(m.heading_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vel_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_to_eth::vel_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_to_eth::vel_cmd_<ContainerAllocator>& v)
  {
    s << indent << "vel_speed: ";
    Printer<double>::stream(s, indent + "  ", v.vel_speed);
    s << indent << "vel_heading: ";
    Printer<double>::stream(s, indent + "  ", v.vel_heading);
    s << indent << "heading_speed: ";
    Printer<double>::stream(s, indent + "  ", v.heading_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_TO_ETH_MESSAGE_VEL_CMD_H
